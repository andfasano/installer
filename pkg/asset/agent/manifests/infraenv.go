package manifests

import (
	"fmt"
	"os"
	"path/filepath"

	aiv1beta1 "github.com/openshift/assisted-service/api/v1beta1"
	"github.com/pkg/errors"
	corev1 "k8s.io/api/core/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/yaml"

	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/installconfig"
)

var (
	infraEnvFilename = filepath.Join(manifestDir, "infraenv.yml")
)

// InfraEnv generates the infraenv.yaml file.
type InfraEnv struct {
	File *asset.File
}

var _ asset.WritableAsset = (*InfraEnv)(nil)

// Name returns a human friendly name for the asset.
func (*InfraEnv) Name() string {
	return "InfraEnv Config"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*InfraEnv) Dependencies() []asset.Asset {
	return []asset.Asset{
		&installconfig.InstallConfig{},
	}
}

// Generate generates the InfraEnv manifest.
func (i *InfraEnv) Generate(dependencies asset.Parents) error {

	installConfig := &installconfig.InstallConfig{}
	dependencies.Get(installConfig)

	infraEnv := &aiv1beta1.InfraEnv{
		ObjectMeta: v1.ObjectMeta{
			Name:      "infraEnv",
			Namespace: installConfig.Config.Namespace,
		},
		Spec: aiv1beta1.InfraEnvSpec{
			ClusterRef: &aiv1beta1.ClusterReference{
				Name:      installConfig.Config.ObjectMeta.Name,
				Namespace: installConfig.Config.ObjectMeta.Namespace,
			},
			SSHAuthorizedKey: installConfig.Config.SSHKey,
			PullSecretRef: &corev1.LocalObjectReference{
				Name: "pull-secret", // TODO get from agent secret
			},
			// NMStateConfigLabelSelector: v1.LabelSelector{
			// 	MatchLabels: map[string]string{
			// 		// fetch from NMStateConfig
			// 	},
			// },
		},
	}

	infraEnvData, err := yaml.Marshal(infraEnv)
	if err != nil {
		return errors.Wrap(err, "failed to marshal agent installer infraEnv")
	}

	i.File = &asset.File{
		Filename: infraEnvFilename,
		Data:     infraEnvData,
	}

	return nil
}

// Files returns the files generated by the asset.
func (i *InfraEnv) Files() []*asset.File {
	if i.File != nil {
		return []*asset.File{i.File}
	}
	return []*asset.File{}
}

// Load returns infraenv asset from the disk.
func (i *InfraEnv) Load(f asset.FileFetcher) (bool, error) {

	infraEnvFile, err := f.FetchByName(infraEnvFilename)
	if err != nil {
		if os.IsNotExist(err) {
			return false, nil
		}
		return false, errors.Wrap(err, fmt.Sprintf("failed to load %s file", infraEnvFilename))
	}

	i.File = infraEnvFile
	return true, nil
}
