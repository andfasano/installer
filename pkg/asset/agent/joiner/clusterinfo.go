package joiner

import (
	"context"
	"net/url"

	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/client-go/tools/clientcmd"

	configclient "github.com/openshift/client-go/config/clientset/versioned"
	"github.com/openshift/installer/pkg/asset"
	"github.com/openshift/installer/pkg/asset/agent/workflow"
)

// ClusterInfo it's an asset used to retrieve config info
// from an already existing cluster.
type ClusterInfo struct {
	ClusterID  string
	APIDNSName string
	PullSecret string
	Namespace  string
}

var _ asset.WritableAsset = (*ClusterInfo)(nil)

// Name returns the human-friendly name of the asset.
func (ci *ClusterInfo) Name() string {
	return "Agent Installer ClusterInfo"
}

// Dependencies returns all of the dependencies directly needed to generate
// the asset.
func (*ClusterInfo) Dependencies() []asset.Asset {
	return []asset.Asset{
		&workflow.AgentWorkflow{},
		&AddNodesConfig{},
	}
}

// Generate generates the ClusterInfo.
func (ci *ClusterInfo) Generate(dependencies asset.Parents) error {
	agentWorkflow := &workflow.AgentWorkflow{}
	addNodesConfig := &AddNodesConfig{}
	dependencies.Get(agentWorkflow, addNodesConfig)

	if agentWorkflow.Workflow != workflow.AgentWorkflowTypeAddNodes {
		return nil
	}

	config, err := ci.getRestConfig(addNodesConfig.Params.Kubeconfig)
	if err != nil {
		return err
	}

	err = ci.retrieveClusterID(config)
	if err != nil {
		return err
	}

	err = ci.retrieveAPIDNSName(config)
	if err != nil {
		return err
	}

	err = ci.retrievePullSecret(config)
	if err != nil {
		return err
	}

	ci.Namespace = "cluster0"

	return nil
}

func (ci *ClusterInfo) getRestConfig(kubeconfig string) (*rest.Config, error) {
	var err error
	var config *rest.Config

	if kubeconfig != "" {
		config, err = clientcmd.BuildConfigFromFlags("", kubeconfig)
	} else {
		config, err = rest.InClusterConfig()
	}

	return config, err
}

func (ci *ClusterInfo) retrieveClusterID(config *rest.Config) error {
	clientset, err := configclient.NewForConfig(config)
	if err != nil {
		return err
	}

	cv, err := clientset.ConfigV1().ClusterVersions().Get(context.Background(), "version", metav1.GetOptions{})
	if err != nil {
		return err
	}
	ci.ClusterID = string(cv.Spec.ClusterID)

	return nil
}

func (ci *ClusterInfo) retrieveAPIDNSName(config *rest.Config) error {
	parsedURL, err := url.Parse(config.Host)
	if err != nil {
		return err
	}

	ci.APIDNSName = parsedURL.Hostname()
	return nil
}

func (ci *ClusterInfo) retrievePullSecret(config *rest.Config) error {
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		return err
	}

	pullSecret, err := clientset.CoreV1().Secrets("openshift-config").Get(context.Background(), "pull-secret", metav1.GetOptions{})
	if err != nil {
		return err
	}
	ci.PullSecret = string(pullSecret.Data[".dockerconfigjson"])

	return nil
}

// Files returns the files generated by the asset.
func (*ClusterInfo) Files() []*asset.File {
	return []*asset.File{}
}

// Load returns agent config asset from the disk.
func (*ClusterInfo) Load(f asset.FileFetcher) (bool, error) {
	return false, nil
}
